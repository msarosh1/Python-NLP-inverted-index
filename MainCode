import random
import string
import sys
import os
import requests
import re
import fnv
import hashlib
from nltk.stem import PorterStemmer
from bs4 import BeautifulSoup
from bs4.element import Comment

folder_path = 'C:\\Users\\Muham\\Desktop\\Semester 5\\Info Ret\\Assignment ' \
              '1\\corpus\\corpus\\corpus'
folder_path1 = 'C:\\Users\\Muham\\Desktop\\Semester 5\\Info Ret\\Assignment ' \
              '1\\stoplist.txt'

# This function checks for the required tags in the html string
def req_tags(element):
    if element.parent.name in ['style', 'script', 'head', 'title', 'meta', '[document]']:
        return False
    if isinstance(element, Comment):
        return False
    return True

# This function uses the previous function to extract only the required text from the html string
def my_html_parser(html_string):
    new_soup = BeautifulSoup(html_string, 'html.parser')
    texts = new_soup.findAll(text=True)
    tags_text = filter(req_tags, texts)
    return u" ".join(y.strip() for y in tags_text)

def occurencecount(my_list): #termidcounter for term occurences
    counter = 0
    mycountlist = []
    mytempid = my_list[0]
    for i in range(len(my_list)):
        if my_list[i][0] != mytempid[0]:
            mycountlist.append(counter)
            counter = 1
            mytempid = my_list[i]
        else:
            counter += 1
    mycountlist.append(counter)
    return mycountlist

def docscount(my_list): #totaldocscounter for terms
    counter = 1
    mytempid = my_list[0]
    mycountlist = []
    for i in range(len(my_list)):
        if my_list[i][0] == mytempid[0]:
            if my_list[i][1] != mytempid[1]:
                counter += 1
                mytempid = my_list[i]
        else:
            mycountlist.append(counter)
            mytempid = my_list[i]
            counter = 1
    mycountlist.append(counter)
    return mycountlist

# Tokenizing the text on spaces
file_names = os.listdir(folder_path)
stoplist = open(folder_path1).read()
stoplist = stoplist.splitlines()
termid = open("C:\\Users\\Muham\\Desktop\\Semester 5\\Info Ret\\Assignment 1\\TERMID.txt", "a", errors='ignore')
docid = open("C:\\Users\\Muham\\Desktop\\Semester 5\\Info Ret\\Assignment 1\\DOCID.txt", "a", errors='ignore')
term_index = open("C:\\Users\\Muham\\Desktop\\Semester 5\\Info Ret\\Assignment 1\\term_index.txt", "a", errors='ignore')
required_punc = string.punctuation + "â€”\""
required_punc = required_punc.replace('\'', '')
substr = "<!DOCTYPE"
curr_doc_id = 1
allterms = {}
tuplist = []

ps = PorterStemmer()

for filename in file_names:
    html = open(folder_path + "\\" + filename, errors='ignore').read()
    index = html.find(substr)
    htmlcode = html[index:]
    finaltext = my_html_parser(htmlcode).lower().split()

    result = [x for x in finaltext if x not in stoplist]
    result = [i.translate(str.maketrans('','',required_punc)) for i in result]
    result = [i for i in result if i]
    result = [ps.stem(i) for i in result]
    print(result)
    y = 0
    for i in result:
        curr_term_id = int(hashlib.sha1(i.encode("utf-8", errors='surrogatepass')).hexdigest(), 16) % (10 ** 6)
        # termid.write(str(curr_term_id)+"\t" + i + "\n")
        allterms.update({curr_term_id: i})
        tuplist.append([curr_term_id, curr_doc_id, y])
        y += 1
    docid.write(str(curr_doc_id)+"\t" + filename + "\n")
    curr_doc_id += 1


for x, y in allterms.items():
    termid.write(str(x) + "\t" + str(y) + "\n")
     # print(x, ":", y)
tuplist.sort(key=lambda tup: [tup[0], tup[1]])
for a, b, c in tuplist:
    print(str(a) + ":" + str(b) + ":" + str(c))
initialTID = tuplist[0][0]
docs_count = docscount(tuplist)
tot_times_count = occurencecount(tuplist)
my_counter = 0
myflag = 0
term_index.write(str(initialTID)+" "+str(tot_times_count[0])+" "+str(docs_count[0])+" ")
term_index.write(str(tuplist[0][1]) + "," + str(tuplist[0][2]) + " ")
nthterm = 1
tupleslen = len(tuplist)
for i in range(len(tuplist)):
    print(i)
    if tuplist[i][0] == initialTID:
        if myflag:
            my_counter += 1
            term_index.write(str(tuplist[i][1] - tuplist[i-my_counter][1]) + "," + str(tuplist[i][2]) + " ")
        else:
            myflag = 1
    else:
        term_index.write("\n"+str(tuplist[i][0])+" "+str(tot_times_count[nthterm])+" "+str(docs_count[nthterm])+" ")
        term_index.write(str(tuplist[i][1]) + "," + str(tuplist[i][2]) + " ")
        initialTID = tuplist[i][0]
        my_counter = 0
        myflag = 1
        nthterm += 1
